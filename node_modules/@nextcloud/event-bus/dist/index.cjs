'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var valid = require('semver/functions/valid.js');
var major = require('semver/functions/major.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var valid__default = /*#__PURE__*/_interopDefaultLegacy(valid);
var major__default = /*#__PURE__*/_interopDefaultLegacy(major);

var ProxyBus = /** @class */ (function () {
    function ProxyBus(bus) {
        if (typeof bus.getVersion !== 'function' || !valid__default["default"](bus.getVersion())) {
            console.warn('Proxying an event bus with an unknown or invalid version');
        }
        else if (major__default["default"](bus.getVersion()) !== major__default["default"](this.getVersion())) {
            console.warn('Proxying an event bus of version ' + bus.getVersion() + ' with ' + this.getVersion());
        }
        this.bus = bus;
    }
    ProxyBus.prototype.getVersion = function () {
        return "3.1.0";
    };
    ProxyBus.prototype.subscribe = function (name, handler) {
        this.bus.subscribe(name, handler);
    };
    ProxyBus.prototype.unsubscribe = function (name, handler) {
        this.bus.unsubscribe(name, handler);
    };
    ProxyBus.prototype.emit = function (name, event) {
        this.bus.emit(name, event);
    };
    return ProxyBus;
}());

var SimpleBus = /** @class */ (function () {
    function SimpleBus() {
        this.handlers = new Map();
    }
    SimpleBus.prototype.getVersion = function () {
        return "3.1.0";
    };
    SimpleBus.prototype.subscribe = function (name, handler) {
        this.handlers.set(name, (this.handlers.get(name) || []).concat(handler));
    };
    SimpleBus.prototype.unsubscribe = function (name, handler) {
        this.handlers.set(name, (this.handlers.get(name) || []).filter(function (h) { return h != handler; }));
    };
    SimpleBus.prototype.emit = function (name, event) {
        (this.handlers.get(name) || []).forEach(function (h) {
            try {
                h(event);
            }
            catch (e) {
                console.error('could not invoke event listener', e);
            }
        });
    };
    return SimpleBus;
}());

var bus = null;
function getBus() {
    if (bus !== null) {
        return bus;
    }
    if (typeof window === 'undefined') {
        // testing or SSR
        return new Proxy({}, {
            get: function () {
                return function () { return console.error('Window not available, EventBus can not be established!'); };
            }
        });
    }
    if (typeof window.OC !== 'undefined' && window.OC._eventBus && typeof window._nc_event_bus === 'undefined') {
        console.warn('found old event bus instance at OC._eventBus. Update your version!');
        window._nc_event_bus = window.OC._eventBus;
    }
    // Either use an existing event bus instance or create one
    if (typeof (window === null || window === void 0 ? void 0 : window._nc_event_bus) !== 'undefined') {
        bus = new ProxyBus(window._nc_event_bus);
    }
    else {
        bus = window._nc_event_bus = new SimpleBus();
    }
    return bus;
}
/**
 * Register an event listener
 *
 * @param name name of the event
 * @param handler callback invoked for every matching event emitted on the bus
 */
function subscribe(name, handler) {
    getBus().subscribe(name, handler);
}
/**
 * Unregister a previously registered event listener
 *
 * Note: doesn't work with anonymous functions (closures). Use method of an object or store listener function in variable.
 *
 * @param name name of the event
 * @param handler callback passed to `subscribed`
 */
function unsubscribe(name, handler) {
    getBus().unsubscribe(name, handler);
}
/**
 * Emit an event
 *
 * @param name name of the event
 * @param event event payload
 */
function emit(name, event) {
    getBus().emit(name, event);
}

exports.ProxyBus = ProxyBus;
exports.SimpleBus = SimpleBus;
exports.emit = emit;
exports.subscribe = subscribe;
exports.unsubscribe = unsubscribe;
//# sourceMappingURL=index.cjs.map
